name: service-ci
on:
  push:
    paths: ["service/**", ".github/workflows/service.yml"]
  pull_request:
    paths: ["service/**"]
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment target (default: dev)"
        required: false
        default: "dev"
jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.12" }
      - name: Start dynamodb-local
        working-directory: service
        run: docker compose -f tests/docker-compose.yml up -d
      - name: Install deps
        working-directory: service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Tests
        working-directory: service
        env:
          PYTHONPATH: src
        run: pytest -q
      - name: Build container image
        working-directory: service
        env:
          DOCKER_BUILDKIT: "1"
        run: docker build -t dodeck-service-ci .
      - name: Stop dynamodb-local
        if: always()
        working-directory: service
        run: docker compose -f tests/docker-compose.yml down
      # Build & push to ECR + deploy via Terraform can be added here.

  deploy:
    name: deploy-${{ github.event.inputs.environment || 'dev' }}
    needs: build-test
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || 'dev' }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          role-session-name: dodeck-service-deploy
          aws-region: ${{ vars.AWS_REGION || 'us-west-2' }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & push image
        working-directory: service
        env:
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          set -euo pipefail
          IMAGE_TAG="${GITHUB_SHA}"
          if [ "${GITHUB_REF_TYPE:-}" = "tag" ]; then
            IMAGE_TAG="${GITHUB_REF_NAME}"
          fi
          if [ -z "${ECR_REPOSITORY}" ]; then
            ECR_REPOSITORY="dodeck-service"
          fi
          FULL_IMAGE="${REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          echo "Building ${FULL_IMAGE}"
          docker build -t "${FULL_IMAGE}" .
          docker push "${FULL_IMAGE}"
          echo "IMAGE_TAG=${IMAGE_TAG}" >> "$GITHUB_ENV"
          echo "IMAGE_URI=${FULL_IMAGE}" >> "$GITHUB_ENV"

      - name: Prepare backend config
        working-directory: infra/terraform/envs/dev
        env:
          TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
          TF_STATE_KEY: ${{ secrets.TF_STATE_KEY }}
          TF_STATE_LOCK_TABLE: ${{ secrets.TF_STATE_LOCK_TABLE }}
          AWS_REGION: ${{ vars.AWS_REGION || 'us-west-2' }}
        run: |
          set -euo pipefail
          : "${TF_STATE_BUCKET:?missing TF_STATE_BUCKET secret}"
          : "${TF_STATE_KEY:?missing TF_STATE_KEY secret}"
          : "${TF_STATE_LOCK_TABLE:?missing TF_STATE_LOCK_TABLE secret}"
          {
            printf 'bucket         = "%s"\n' "${TF_STATE_BUCKET}"
            printf 'key            = "%s"\n' "${TF_STATE_KEY}"
            printf 'region         = "%s"\n' "${AWS_REGION}"
            printf 'dynamodb_table = "%s"\n' "${TF_STATE_LOCK_TABLE}"
            printf 'encrypt        = true\n'
          } > backend.hcl

      - name: Terraform apply
        working-directory: infra/terraform/envs/dev
        env:
          AWS_REGION: ${{ vars.AWS_REGION || 'us-west-2' }}
          AUTH0_ISSUER: ${{ secrets.AUTH0_ISSUER }}
          AUTH0_AUDIENCE: ${{ secrets.AUTH0_AUDIENCE }}
          CORS_ALLOWED_ORIGINS: ${{ vars.CORS_ALLOWED_ORIGINS || 'http://localhost:5173' }}
          SERVICE_IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          set -euo pipefail
          terraform init -backend-config=backend.hcl
          terraform apply -auto-approve \
            -var "aws_region=${AWS_REGION}" \
            -var "auth0_issuer=${AUTH0_ISSUER}" \
            -var "auth0_audience=${AUTH0_AUDIENCE}" \
            -var "cors_allowed_origins=${CORS_ALLOWED_ORIGINS}" \
            -var "service_image_tag=${SERVICE_IMAGE_TAG}"

      - name: Capture App Runner URL
        id: apprunner_url
        working-directory: infra/terraform/envs/dev
        run: |
          URL=$(terraform output -raw service_url)
          echo "url=${URL}" >> "$GITHUB_OUTPUT"
          echo "APP_RUNNER_URL=${URL}" >> "$GITHUB_ENV"

      - name: Publish deployment summary
        run: |
          echo "App Runner URL: ${APP_RUNNER_URL}"
